/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Recorder {
  export type UserInfoStruct = {
    depositor: AddressLike;
    asset: AddressLike;
    amountAfterDeposit: BigNumberish;
  };

  export type UserInfoStructOutput = [
    depositor: string,
    asset: string,
    amountAfterDeposit: bigint
  ] & { depositor: string; asset: string; amountAfterDeposit: bigint };

  export type DepositInfoStruct = {
    info: Recorder.UserInfoStruct;
    uniqueDeposits: BigNumberish;
    currentDeposit: BigNumberish;
  };

  export type DepositInfoStructOutput = [
    info: Recorder.UserInfoStructOutput,
    uniqueDeposits: bigint,
    currentDeposit: bigint
  ] & {
    info: Recorder.UserInfoStructOutput;
    uniqueDeposits: bigint;
    currentDeposit: bigint;
  };
}

export interface RecorderInterface extends Interface {
  getFunction(
    nameOrSignature: "getDepositDelta" | "userHasDeposited" | "withdrawals"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getDepositDelta",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userHasDeposited",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawals",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getDepositDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userHasDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawals",
    data: BytesLike
  ): Result;
}

export interface Recorder extends BaseContract {
  connect(runner?: ContractRunner | null): Recorder;
  waitForDeployment(): Promise<this>;

  interface: RecorderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getDepositDelta: TypedContractMethod<
    [standardizedKey: BytesLike],
    [Recorder.DepositInfoStructOutput],
    "view"
  >;

  userHasDeposited: TypedContractMethod<
    [user: AddressLike, asset: AddressLike],
    [boolean],
    "view"
  >;

  withdrawals: TypedContractMethod<
    [withdrawalKeyHash: BytesLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getDepositDelta"
  ): TypedContractMethod<
    [standardizedKey: BytesLike],
    [Recorder.DepositInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "userHasDeposited"
  ): TypedContractMethod<
    [user: AddressLike, asset: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawals"
  ): TypedContractMethod<[withdrawalKeyHash: BytesLike], [bigint], "view">;

  filters: {};
}
