/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Recorder {
  export type UserInfoStruct = {
    depositor: AddressLike;
    asset: AddressLike;
    amountAfterDeposit: BigNumberish;
  };

  export type UserInfoStructOutput = [
    depositor: string,
    asset: string,
    amountAfterDeposit: bigint
  ] & { depositor: string; asset: string; amountAfterDeposit: bigint };

  export type DepositInfoStruct = {
    info: Recorder.UserInfoStruct;
    uniqueDeposits: BigNumberish;
    currentDeposit: BigNumberish;
  };

  export type DepositInfoStructOutput = [
    info: Recorder.UserInfoStructOutput,
    uniqueDeposits: bigint,
    currentDeposit: bigint
  ] & {
    info: Recorder.UserInfoStructOutput;
    uniqueDeposits: bigint;
    currentDeposit: bigint;
  };
}

export interface MainInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deposit"
      | "getDepositDelta"
      | "getLast64Roots"
      | "length"
      | "root"
      | "userHasDeposited"
      | "withdraw"
      | "withdrawals"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "DepositAdded"): EventFragment;

  encodeFunctionData(
    functionFragment: "deposit",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositDelta",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLast64Roots",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "length", values?: undefined): string;
  encodeFunctionData(functionFragment: "root", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userHasDeposited",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      BytesLike,
      BytesLike,
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish],
      BigNumberish,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawals",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDepositDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLast64Roots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "length", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "root", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userHasDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawals",
    data: BytesLike
  ): Result;
}

export namespace DepositAddedEvent {
  export type InputTuple = [leaf: BytesLike];
  export type OutputTuple = [leaf: string];
  export interface OutputObject {
    leaf: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Main extends BaseContract {
  connect(runner?: ContractRunner | null): Main;
  waitForDeployment(): Promise<this>;

  interface: MainInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deposit: TypedContractMethod<
    [commitment: BytesLike, asset: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;

  getDepositDelta: TypedContractMethod<
    [standardizedKey: BytesLike],
    [Recorder.DepositInfoStructOutput],
    "view"
  >;

  getLast64Roots: TypedContractMethod<[], [string[]], "view">;

  length: TypedContractMethod<[], [bigint], "view">;

  root: TypedContractMethod<[], [string], "view">;

  userHasDeposited: TypedContractMethod<
    [user: AddressLike, asset: AddressLike],
    [boolean],
    "view"
  >;

  withdraw: TypedContractMethod<
    [
      root: BytesLike,
      withdrawalKey: BytesLike,
      pA: [BigNumberish, BigNumberish],
      pB: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      pC: [BigNumberish, BigNumberish],
      nullifier: BigNumberish,
      recipient: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  withdrawals: TypedContractMethod<
    [withdrawalKeyHash: BytesLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [commitment: BytesLike, asset: AddressLike, amount: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getDepositDelta"
  ): TypedContractMethod<
    [standardizedKey: BytesLike],
    [Recorder.DepositInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLast64Roots"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "length"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "root"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "userHasDeposited"
  ): TypedContractMethod<
    [user: AddressLike, asset: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [
      root: BytesLike,
      withdrawalKey: BytesLike,
      pA: [BigNumberish, BigNumberish],
      pB: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      pC: [BigNumberish, BigNumberish],
      nullifier: BigNumberish,
      recipient: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawals"
  ): TypedContractMethod<[withdrawalKeyHash: BytesLike], [bigint], "view">;

  getEvent(
    key: "DepositAdded"
  ): TypedContractEvent<
    DepositAddedEvent.InputTuple,
    DepositAddedEvent.OutputTuple,
    DepositAddedEvent.OutputObject
  >;

  filters: {
    "DepositAdded(bytes32)": TypedContractEvent<
      DepositAddedEvent.InputTuple,
      DepositAddedEvent.OutputTuple,
      DepositAddedEvent.OutputObject
    >;
    DepositAdded: TypedContractEvent<
      DepositAddedEvent.InputTuple,
      DepositAddedEvent.OutputTuple,
      DepositAddedEvent.OutputObject
    >;
  };
}
